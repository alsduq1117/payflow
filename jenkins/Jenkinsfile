pipeline {
  agent any
  tools { jdk 'openjdk-17-jdk' }

  environment {
    BE_IMAGE = 'alsduq1117/payflow'
    FE_IMAGE = 'alsduq1117/payflow-frontend'
    TAG      = "build-${env.BUILD_NUMBER}"
  }

  stages {
    stage('Clone') {
      steps {
        git branch: 'main', url: 'https://github.com/alsduq1117/payflow.git', credentialsId: 'alsduq1117'
      }
    }

    stage('Build Backend') {
      steps {
        sh 'chmod +x gradlew'
        sh './gradlew clean build -x test'
      }
    }

    stage('Docker Login') {
      steps {
        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
      }
    }

    stage('Build & Push BE/FE Images') {
      steps {
        sh """
          docker build -t ${BE_IMAGE}:${TAG} -t ${BE_IMAGE}:latest -f Dockerfile .
          docker push ${BE_IMAGE}:${TAG}
          docker push ${BE_IMAGE}:latest
        """
        sh """
          docker build -t ${FE_IMAGE}:${TAG} -t ${FE_IMAGE}:latest -f front/Dockerfile front
          docker push ${FE_IMAGE}:${TAG}
          docker push ${FE_IMAGE}:latest
        """
      }
    }

    stage('Deploy (Compose All)') {
      steps {
        sshPublisher(publishers: [
          sshPublisherDesc(
            configName: 'ApplicationServer',
            verbose: true,
            transfers: [
              sshTransfer(
                sourceFiles: 'deploy/**',
                remoteDirectory: '/home/ubuntu/app/deploy'
              ),
              sshTransfer(
                execCommand: """
                  set -e
                  cd /home/ubuntu/app/deploy
                  echo "Using latest images"
                  docker compose pull
                  docker compose up -d
                  docker image prune -f || true
                """,
                execTimeout: 180000
              )
            ]
          )
        ])
      }
    }
  }
}