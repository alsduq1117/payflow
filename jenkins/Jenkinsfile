pipeline {
  agent any

  environment {
    BE_IMAGE = 'alsduq1117/payflow'
    FE_IMAGE = 'alsduq1117/payflow-frontend'
    TAG      = "build-${env.BUILD_NUMBER}"
  }

  stages {
    stage('Clone') {
      steps {
        git branch: 'main', url: 'https://github.com/alsduq1117/payflow.git', credentialsId: 'alsduq1117'
      }
    }

    steps {
      sh 'echo "=== NODE INFO ==="; hostname; uname -a'
      sh 'echo "=== WHOAMI ==="; whoami'
      sh 'echo "=== /etc/os-release ==="; cat /etc/os-release || true'
      sh 'echo "=== which java ==="; which java || true'
      sh 'echo "=== java -version ==="; java -version || true'
      sh 'echo "=== JAVA_HOME ==="; echo "$JAVA_HOME" || true'
      sh 'chmod +x gradlew'
      sh './gradlew --version || true'
    }

    stage('Build Backend') {
      steps {
        sh 'chmod +x gradlew'
        sh './gradlew clean build'
      }
    }

    stage('Docker Login') {
      steps {
        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
      }
    }

    stage('Build & Push BE/FE Images') {
      steps {
        sh """
          docker build -t ${BE_IMAGE}:${TAG} -t ${BE_IMAGE}:latest .
          docker push ${BE_IMAGE}:${TAG}
          docker push ${BE_IMAGE}:latest
        """
        dir('frontend') {
          sh """
            docker build -t ${FE_IMAGE}:${TAG} -t ${FE_IMAGE}:latest .
            docker push ${FE_IMAGE}:${TAG}
            docker push ${FE_IMAGE}:latest
          """
        }
      }
    }

    stage('Deploy (Compose All)') {
      steps {
        sshPublisher(publishers: [
          sshPublisherDesc(
            configName: 'ApplicationServer',
            verbose: true,
            transfers: [
              sshTransfer(
                sourceFiles: 'deploy/**',
                remoteDirectory: '/home/ubuntu/app/deploy'
              ),
              sshTransfer(
                execCommand: """
                  set -e
                  cd /home/ubuntu/app/deploy
                  export BE_TAG='${TAG}'
                  export FE_TAG='${TAG}'
                  echo "Using BE_TAG=$BE_TAG, FE_TAG=$FE_TAG"
                  docker compose pull
                  docker compose up -d
                  docker image prune -f || true
                """,
                execTimeout: 180000
              )
            ]
          )
        ])
      }
    }
  }
}